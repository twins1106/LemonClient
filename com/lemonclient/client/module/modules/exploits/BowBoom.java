//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\πŸ≈¡ »≠∏È\map"!

//Decompiled by Procyon!

package com.lemonclient.client.module.modules.exploits;

import com.lemonclient.client.module.*;
import com.lemonclient.api.setting.values.*;
import com.lemonclient.api.event.events.*;
import me.zero.alpine.listener.*;
import java.util.function.*;
import net.minecraft.entity.*;
import net.minecraft.network.*;
import net.minecraft.util.*;
import net.minecraft.network.play.client.*;
import net.minecraft.item.*;

@Module.Declaration(name = "BowExploit", category = Category.Exploits)
public class BowBoom extends Module
{
    BooleanSetting Bows;
    BooleanSetting pearls;
    BooleanSetting eggs;
    BooleanSetting snowballs;
    IntegerSetting Timeout;
    IntegerSetting spoofs;
    BooleanSetting offhand;
    BooleanSetting bypass;
    private long lastShootTime;
    @EventHandler
    private final Listener<PacketEvent.Send> onUpdate;
    
    public BowBoom() {
        this.Bows = this.registerBoolean("Bows", true);
        this.pearls = this.registerBoolean("Pearls", true);
        this.eggs = this.registerBoolean("Eggs", true);
        this.snowballs = this.registerBoolean("Snowballs", true);
        this.Timeout = this.registerInteger("Timeout", 5000, 100, 2000);
        this.spoofs = this.registerInteger("Spoofs", 10, 1, 300);
        this.offhand = this.registerBoolean("Offhand", false);
        this.bypass = this.registerBoolean("Bypass", false);
        this.onUpdate = (Listener<PacketEvent.Send>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerDigging) {
                final CPacketPlayerDigging packet = (CPacketPlayerDigging)event.getPacket();
                if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                    final ItemStack handStack = BowBoom.mc.player.getHeldItem(EnumHand.MAIN_HAND);
                    final ItemStack offhandStack = BowBoom.mc.player.getHeldItem(EnumHand.OFF_HAND);
                    if ((boolean)this.Bows.getValue() && (handStack.getItem() instanceof ItemBow || ((boolean)this.offhand.getValue() && offhandStack.getItem() instanceof ItemBow))) {
                        this.doSpoofs();
                    }
                }
            }
            else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
                final CPacketPlayerTryUseItem packet2 = (CPacketPlayerTryUseItem)event.getPacket();
                if (packet2.getHand() == EnumHand.MAIN_HAND) {
                    final ItemStack handStack = BowBoom.mc.player.getHeldItem(EnumHand.MAIN_HAND);
                    final ItemStack offhandStack = BowBoom.mc.player.getHeldItem(EnumHand.OFF_HAND);
                    if (!handStack.isEmpty()) {
                        if ((boolean)this.eggs.getValue() && (handStack.getItem() instanceof ItemEgg || ((boolean)this.offhand.getValue() && offhandStack.getItem() instanceof ItemEgg))) {
                            this.doSpoofs();
                        }
                        else if ((boolean)this.pearls.getValue() && (handStack.getItem() instanceof ItemEnderPearl || ((boolean)this.offhand.getValue() && offhandStack.getItem() instanceof ItemEnderPearl))) {
                            this.doSpoofs();
                        }
                        else if ((boolean)this.snowballs.getValue() && (handStack.getItem() instanceof ItemSnowball || ((boolean)this.offhand.getValue() && offhandStack.getItem() instanceof ItemSnowball))) {
                            this.doSpoofs();
                        }
                    }
                }
            }
        }, new Predicate[0]);
    }
    
    public void onEnable() {
        if (this.isEnabled()) {
            this.lastShootTime = System.currentTimeMillis();
        }
    }
    
    private void doSpoofs() {
        if (System.currentTimeMillis() - this.lastShootTime >= (int)this.Timeout.getValue()) {
            this.lastShootTime = System.currentTimeMillis();
            BowBoom.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)BowBoom.mc.player, CPacketEntityAction.Action.START_SPRINTING));
            for (int index = 0; index < (int)this.spoofs.getValue(); ++index) {
                if (this.bypass.getValue()) {
                    BowBoom.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowBoom.mc.player.posX, BowBoom.mc.player.posY + 1.0E-10, BowBoom.mc.player.posZ, false));
                    BowBoom.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowBoom.mc.player.posX, BowBoom.mc.player.posY - 1.0E-10, BowBoom.mc.player.posZ, true));
                }
                else {
                    BowBoom.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowBoom.mc.player.posX, BowBoom.mc.player.posY - 1.0E-10, BowBoom.mc.player.posZ, true));
                    BowBoom.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowBoom.mc.player.posX, BowBoom.mc.player.posY + 1.0E-10, BowBoom.mc.player.posZ, false));
                }
            }
        }
    }
}
