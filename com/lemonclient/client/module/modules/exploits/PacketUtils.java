//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\πŸ≈¡ »≠∏È\map"!

//Decompiled by Procyon!

package com.lemonclient.client.module.modules.exploits;

import com.lemonclient.client.module.*;
import com.lemonclient.api.setting.values.*;
import com.lemonclient.api.util.misc.*;
import me.zero.alpine.listener.*;
import com.lemonclient.api.event.events.*;
import java.util.function.*;
import net.minecraft.network.play.server.*;
import net.minecraft.block.*;
import net.minecraft.network.play.client.*;
import net.minecraft.entity.*;
import net.minecraft.network.*;
import net.minecraft.init.*;
import com.lemonclient.api.util.player.*;

@Module.Declaration(name = "PacketUtils", category = Category.Exploits)
public class PacketUtils extends Module
{
    private boolean shouldStop;
    BooleanSetting breakReset;
    BooleanSetting noRotate;
    BooleanSetting noInteract;
    BooleanSetting containerOnly;
    BooleanSetting onlyGapple;
    BooleanSetting packetJump;
    IntegerSetting delay;
    public BooleanSetting packetUse;
    public BooleanSetting food;
    public BooleanSetting potion;
    public BooleanSetting all;
    Timer timer;
    @EventHandler
    private final Listener<PlayerJumpEvent> jumpEventListener;
    @EventHandler
    private final Listener<PacketEvent.Send> sendListener;
    @EventHandler
    private final Listener<BlockResetEvent> blockResetEventListener;
    @EventHandler
    private final Listener<PacketEvent.PostSend> postSendListener;
    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener;
    
    public PacketUtils() {
        this.shouldStop = false;
        this.breakReset = this.registerBoolean("No Break Reset", false);
        this.noRotate = this.registerBoolean("No Rotate", false);
        this.noInteract = this.registerBoolean("No Interact", false);
        this.containerOnly = this.registerBoolean("Container Only", false, () -> (Boolean)this.noInteract.getValue());
        this.onlyGapple = this.registerBoolean("Only Gapple", false, () -> (Boolean)this.noInteract.getValue());
        this.packetJump = this.registerBoolean("Packet Jump", false);
        this.delay = this.registerInteger("Min Jump Delay", 0, 0, 50, () -> (Boolean)this.packetJump.getValue());
        this.packetUse = this.registerBoolean("Packet Use", false);
        this.food = this.registerBoolean("Food", true, () -> (Boolean)this.packetUse.getValue());
        this.potion = this.registerBoolean("Potion", true, () -> (Boolean)this.packetUse.getValue());
        this.all = this.registerBoolean("All", false, () -> (Boolean)this.packetUse.getValue());
        this.timer = new Timer();
        this.jumpEventListener = (Listener<PlayerJumpEvent>)new Listener(event -> {
            if ((boolean)this.packetJump.getValue() && ((int)this.delay.getValue() == 0 || (this.timer.hasReached((long)(int)this.delay.getValue(), true) && PacketUtils.mc.player.onGround))) {
                PlayerUtil.fakeJump();
                PacketUtils.mc.player.setPosition(PacketUtils.mc.player.posX, PacketUtils.mc.player.posY + 1.1661092609382, PacketUtils.mc.player.posZ);
                PacketUtils.mc.player.motionY = -0.0830778178;
                event.cancel();
            }
        }, new Predicate[0]);
        this.sendListener = (Listener<PacketEvent.Send>)new Listener(event -> {
            if (PacketUtils.mc.world == null || PacketUtils.mc.player == null || PacketUtils.mc.player.isDead) {
                return;
            }
            if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && !PacketUtils.mc.player.isSneaking() && (boolean)this.noInteract.getValue()) {
                final CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
                if (((boolean)this.containerOnly.getValue() && !(PacketUtils.mc.world.getBlockState(packet.getPos()).getBlock() instanceof BlockContainer)) || ((boolean)this.onlyGapple.getValue() && PacketUtils.mc.player.getHeldItemMainhand().getItem() != Items.GOLDEN_APPLE)) {
                    return;
                }
                PacketUtils.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)PacketUtils.mc.player, CPacketEntityAction.Action.START_SNEAKING));
                this.shouldStop = true;
            }
        }, new Predicate[0]);
        this.blockResetEventListener = (Listener<BlockResetEvent>)new Listener(event -> {
            if (PacketUtils.mc.world == null || PacketUtils.mc.player == null || PacketUtils.mc.player.isDead) {
                return;
            }
            if (this.breakReset.getValue()) {
                event.cancel();
            }
        }, new Predicate[0]);
        this.postSendListener = (Listener<PacketEvent.PostSend>)new Listener(event -> {
            if (PacketUtils.mc.world == null || PacketUtils.mc.player == null || PacketUtils.mc.player.isDead) {
                return;
            }
            if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.shouldStop && (boolean)this.noInteract.getValue()) {
                final CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
                if ((boolean)this.containerOnly.getValue() && !(PacketUtils.mc.world.getBlockState(packet.getPos()).getBlock() instanceof BlockContainer)) {
                    return;
                }
                PacketUtils.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)PacketUtils.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                this.shouldStop = false;
            }
        }, new Predicate[0]);
        this.receiveListener = (Listener<PacketEvent.Receive>)new Listener(event -> {
            if (PacketUtils.mc.world == null || PacketUtils.mc.player == null || PacketUtils.mc.player.isDead) {
                return;
            }
            if (event.getPacket() instanceof SPacketPlayerPosLook && (boolean)this.noRotate.getValue()) {
                final SPacketPlayerPosLook e = (SPacketPlayerPosLook)event.getPacket();
                e.pitch = PacketUtils.mc.player.rotationPitch;
                e.yaw = PacketUtils.mc.player.rotationYaw;
            }
        }, new Predicate[0]);
    }
}
